{
  "name": "allcoderelay",
  "nodes": [
    {
      "parameters": {
        "httpMethod": "POST",
        "path": "allcoderelay",
        "responseMode": "responseNode",
        "options": {
          "ignoreBots": false
        }
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        -1160,
        -40
      ],
      "id": "cdbacbd0-f16c-46f1-91cd-47d53e7a7169",
      "name": "Webhook",
      "webhookId": "b34ead62-ced0-485c-958a-a22fa78156ce"
    },
    {
      "parameters": {
        "model": "gpt-4.1-nano-2025-04-14",
        "options": {}
      },
      "id": "1596ea84-32c7-4377-993d-a6e2142ca340",
      "name": "OpenAI Chat Model",
      "type": "@n8n/n8n-nodes-langchain.lmChatOpenAi",
      "position": [
        -80,
        440
      ],
      "typeVersion": 1,
      "credentials": {
        "openAiApi": {
          "id": "NCxBdTfGSR23yxNL",
          "name": "OpenAi account"
        }
      }
    },
    {
      "parameters": {
        "sessionIdType": "customKey",
        "sessionKey": "={{ $now }}",
        "tableName": "n8n_chat_histories_wu",
        "contextWindowLength": 20
      },
      "type": "@n8n/n8n-nodes-langchain.memoryPostgresChat",
      "typeVersion": 1.3,
      "position": [
        60,
        430
      ],
      "id": "f605680f-88ca-430e-8c6b-ae3705d7e1dd",
      "name": "Postgres Chat Memory",
      "credentials": {
        "postgres": {
          "id": "zPEZmUdhPUjMJhsf",
          "name": "Postgres account"
        }
      }
    },
    {
      "parameters": {
        "options": {
          "gl": "sk",
          "hl": "sk"
        }
      },
      "id": "e67e5813-a153-4908-ac40-f0c9f727a9f9",
      "name": "SerpAPI",
      "type": "@n8n/n8n-nodes-langchain.toolSerpApi",
      "position": [
        180,
        430
      ],
      "typeVersion": 1,
      "credentials": {
        "serpApi": {
          "id": "b3dnk8MTsPtY6F1B",
          "name": "SerpAPI account 2"
        }
      }
    },
    {
      "parameters": {
        "jsCode": "\n// Function to validate if the code is a valid EAN-13\nfunction isValidEAN13(code) {\n  // Check if input is a 13-digit number\n  if (!/^\\d{13}$/.test(code)) {\n    return false;\n  }\n  \n  // Calculate checksum\n  let sum = 0;\n  for (let i = 0; i < 12; i++) {\n    sum += parseInt(code[i]) * (i % 2 === 0 ? 1 : 3);\n  }\n  \n  const checkDigit = (10 - (sum % 10)) % 10;\n  \n  // Verify that the check digit matches the last digit\n  return checkDigit === parseInt(code[12]);\n}\n\n// Get code from input\nconst inputCode = $input.first().json.body;\nlet result;\n\n// Check if code is a valid EAN-13\nif (typeof inputCode === 'string' || typeof inputCode === 'number') {\n  const codeStr = inputCode.toString();\n  result = isValidEAN13(codeStr);\n} else {\n  result = false;\n}\n\nreturn [{\"isean13\": result}];"
      },
      "id": "c317e649-9c46-453b-b7e9-42cad997aea4",
      "name": "isEan13?",
      "type": "n8n-nodes-base.code",
      "typeVersion": 1,
      "position": [
        -720,
        -40
      ]
    },
    {
      "parameters": {
        "content": "# Example of webhook for the mobile app AllCodeRelay\n\n### AllCodeRelay app is Universal code scanner with webhook integration.\nApp scans Barcode, QR codes, Data Matrix, Aztec, ... and reads NFC. ",
        "height": 180,
        "width": 1800,
        "color": 4
      },
      "id": "3b8ba3b6-e718-4d6f-ac18-1a921a9af9a6",
      "name": "Sticky Note8",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1200,
        -400
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "content": "# Webhook description\n\n### POST Request Format\n\nWhen a code is scanned, the app sends a POST request with this structure:\n\n```json\n{\n  \"code\": \"SCANNED_CODE_VALUE\"\n}\n```\n\n### Expected Response\n\n\nWebhook should return a JSON response with this structure:\n\n```json\n{\n  \"code\": \"SCANNED_CODE_TYPE\",\n  \"codevalue\": \"PROCESSED_VALUE\"\n}\n```\n\nWhere:\n\n- `code`: Type of code scanned (e.g., \"QR\", \"BARCODE\", \"NFC\")\n- `codevalue`: The processed value or meaning of the code\n\nIf the server returns a non-200 status code or the response cannot be parsed, the app will store the scan locally.\n\n",
        "height": 700,
        "width": 620,
        "color": 7
      },
      "id": "29789de6-f87c-49c2-a578-6e405adedffd",
      "name": "Sticky Note2",
      "type": "n8n-nodes-base.stickyNote",
      "position": [
        -1180,
        140
      ],
      "typeVersion": 1
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"code\": \"{{ $('Extract code from JSON').item.json.body }}\",\n  \"codevalue\": \"https://www.ean-search.org/?q={{ $('Extract code from JSON').item.json.body }}\"}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.2,
      "position": [
        -280,
        -140
      ],
      "id": "b16f9dba-b54b-47df-adbe-3b33c29b1171",
      "name": "Respond with EAN13 info URL"
    },
    {
      "parameters": {
        "method": "PUT",
        "url": "https://admin.phillip.city/api/v1/sip-doors/1000001/open",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "Authorization",
              "value": "={{ $('Webhook').item.json.headers.authorization }}"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        50,
        -90
      ],
      "id": "7ebe0c95-31e2-4094-a8b8-f91e44b1793a",
      "name": "Open my door API"
    },
    {
      "parameters": {
        "promptType": "define",
        "text": "=Scanned code: \"{{ $('Extract code from JSON').item.json.body }}\"",
        "options": {
          "systemMessage": "You are search automat for 1D barcode or 2D code you get from the input. Find information about the code on the web, if possible. Sumarize into final short description, do not offer to answer additional questions."
        }
      },
      "id": "3fa2279f-dccf-4ded-bc08-50542400c059",
      "name": "AI answer to your code...",
      "type": "@n8n/n8n-nodes-langchain.agent",
      "position": [
        -28,
        210
      ],
      "typeVersion": 1.6
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"code\": \"{{ $('If door NFC scanned').item.json.body?.parseJson().values()[0] ?? \"N/A\" }}\",\n  \"codevalue\": \"Door opened?...\"\n} ",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        380,
        -90
      ],
      "id": "3fb91f77-0d5b-4910-b32d-72f9242ca869",
      "name": "Respond: door opened?"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"code\": \"{{ $('Webhook').item.json.body?.parseJson().code }}\",\n  \"codevalue\": {{ $json.output?.toJsonString() ?? 'OK' }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        380,
        210
      ],
      "id": "902ef093-0a32-4f5b-b600-cb9775474e69",
      "name": "Respond: AI summary"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "cc2cbab7-e4f3-4a8a-9657-14687673e7ca",
              "leftValue": "={{ $json.body }}",
              "rightValue": "{\"code\":\"pozdravujem...\"}",
              "operator": {
                "type": "string",
                "operation": "equals",
                "name": "filter.operator.equals"
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -280,
        60
      ],
      "id": "0ccdd773-d5f5-47c5-98d5-d962413787de",
      "name": "If door NFC scanned"
    },
    {
      "parameters": {
        "conditions": {
          "options": {
            "caseSensitive": true,
            "leftValue": "",
            "typeValidation": "strict",
            "version": 2
          },
          "conditions": [
            {
              "id": "baabc790-7d2a-4617-ad76-d8a73df812a8",
              "leftValue": "={{ $json.isean13 }}",
              "rightValue": "true",
              "operator": {
                "type": "boolean",
                "operation": "true",
                "singleValue": true
              }
            }
          ],
          "combinator": "and"
        },
        "options": {}
      },
      "type": "n8n-nodes-base.if",
      "typeVersion": 2.2,
      "position": [
        -500,
        -40
      ],
      "id": "5b561bc8-c742-4349-88ea-42c056e27bd7",
      "name": "If"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "009f20ae-a720-4864-9a42-ab961a683523",
              "name": "body",
              "value": "={{ $json.body.parseJson().code }}",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        -940,
        -40
      ],
      "id": "a99bbf33-e1c1-4207-8d70-c8e771e1f692",
      "name": "Extract code from JSON"
    }
  ],
  "pinData": {},
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "Extract code from JSON",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "OpenAI Chat Model": {
      "ai_languageModel": [
        [
          {
            "node": "AI answer to your code...",
            "type": "ai_languageModel",
            "index": 0
          }
        ]
      ]
    },
    "Postgres Chat Memory": {
      "ai_memory": [
        [
          {
            "node": "AI answer to your code...",
            "type": "ai_memory",
            "index": 0
          }
        ]
      ]
    },
    "SerpAPI": {
      "ai_tool": [
        [
          {
            "node": "AI answer to your code...",
            "type": "ai_tool",
            "index": 0
          }
        ]
      ]
    },
    "isEan13?": {
      "main": [
        [
          {
            "node": "If",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Open my door API": {
      "main": [
        [
          {
            "node": "Respond: door opened?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "AI answer to your code...": {
      "main": [
        [
          {
            "node": "Respond: AI summary",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If door NFC scanned": {
      "main": [
        [
          {
            "node": "Open my door API",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "AI answer to your code...",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "If": {
      "main": [
        [
          {
            "node": "Respond with EAN13 info URL",
            "type": "main",
            "index": 0
          }
        ],
        [
          {
            "node": "If door NFC scanned",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Extract code from JSON": {
      "main": [
        [
          {
            "node": "isEan13?",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": true,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "31593121-f8c5-4437-9ac2-979ff7414f7f",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "7f64702f4c868dda4f6f92b37affeb30a1986785fb8fe28dbe0d2a73378a28ec"
  },
  "id": "tjQGNMKxvQbB1AqZ",
  "tags": []
}